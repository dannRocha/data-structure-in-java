/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package aed.linkedlist;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import static org.junit.Assert.*;


import aed.linkedlist.LinkedList;

public class LinkedListTest {

  LinkedList linkedlist;

  @Before
  public void initialize(){
    linkedlist = new LinkedList<String>();
    linkedlist.add("Daniel");
    linkedlist.add("Rocha");
    linkedlist.add("Silva");
  }

  @Test
  public void shouldSettingValuesWithConstructor() {
    var list = new LinkedList<String>(linkedlist);
    var expect = true;

    assertEquals(list.equals(linkedlist), expect);
  }
    
  @Test 
  public void shouldAddElementsOntheListLinked() {
    final int expectElementsInTheLinkedList = 3;
    assertEquals(linkedlist.length(), expectElementsInTheLinkedList);
  }

  @Test
  public void shouldReturnTheNIndexElementInTheLinkedList() {
  
    final String expectElement = "Rocha";
    final int index = 1;

    assertEquals(linkedlist.get(index), expectElement);
  }
  
  @Test
  public void shouldCloneLinkedList() {

    var cloneLinkedList = linkedlist.clone();

    assertEquals(cloneLinkedList.length(), linkedlist.length());
    for(int i = 0; i < linkedlist.length(); i++) {
      assertEquals(linkedlist.get(i), cloneLinkedList.get(i));
    } 
  }
  
  @Test
  public void shouldClearLinkedList() {
    linkedlist.clear();
    
    final boolean empty = true;
    final int length = 0;

    assertEquals(linkedlist.isEmpty(), empty);
    assertEquals(linkedlist.length(), length);
  }

  @Test
  public void shouldReturnIfcontainsElementWithTrue() {
    final String element = "Rocha";
    final boolean expect = true;
    assertEquals(linkedlist.contains(element), expect);
  }
  
  @Test
  public void shouldReturnIfcontainsElementWithFalse() {
    final String element = "Rocha Silva";
    final boolean expect = false;
    assertEquals(linkedlist.contains(element), expect);
  }

  @Test
  public void shouldReturnIfCustomContainsElementWithFalse() {
    final String element = "Rocha";
    final boolean expect = true;
    assertEquals(linkedlist.contains(element, (a, b) -> a.equals(b)), expect);
  }

  @Test
  public void shouldAddInTheCustomIndexInTheLinkedList() {
    
    var element = "Pereira";
    var index = 2;

    linkedlist.add(index, element);
    
    assertEquals(linkedlist.get(index), element);
  }

  @Test
  public void shouldConcatLinkedList() {
    var linkedlistA = new LinkedList<Integer>(1, 2, 3, 4);
    var linkedlistB = new LinkedList<Integer>(5, 6, 7, 8);
    var expect = linkedlistA.length() + linkedlistB.length();

    linkedlistA.concat(linkedlistB);
    
    assertEquals(linkedlistA.length(), expect);
  }

  @Test
  public void shouldReturnIndexOfElementInTheLinkedList() {
    var element = "Rocha";

    final int index = 1;
    assertEquals(linkedlist.indexOf(element), index);
  }

  @Test
  public void shouldReturnMinusOneIfThereIsNoElementInTheLinkedList() {
    var element = "Pereira";
    final int index = -1;
    assertEquals(linkedlist.indexOf(element), index);
  }

  @Test
  public void shouldRemoveTheElementLinkedList() {
    
    var expect = linkedlist.length() - 1;
    linkedlist.remove(0);

    assertEquals(linkedlist.length(), expect);
  }

  @Test
  public void shouldUpdateElementValueInTheLinkedList() {
    var value = "Pereira";
    var index = 1;

    linkedlist.set(index, value);
    assertEquals(linkedlist.get(index), value);
  }

  @Test
  public void throwIndexOutOfBoundsExceptionWhenAddingElementInTheInvalidIndex() {
    assertThrows(IndexOutOfBoundsException.class, () -> {
      var element = "Pereira";
      var invalidIndex = Integer.MAX_VALUE;
      linkedlist.add(invalidIndex, element);
    });
  }

  @Test
  public void throwIndexOutOfBoundsExceptionWhenRemovingElementInTheInvalidIndex() {
    assertThrows(IndexOutOfBoundsException.class, () -> {
      var invalidIndex = Integer.MAX_VALUE;
      linkedlist.remove(invalidIndex);
    });
  }

  @Test
  public void throwIndexOutOfBoundsExceptionWhenSettingElementInTheInvalidIndex() {
    assertThrows(IndexOutOfBoundsException.class, () -> {
      var element = "Pereira";
      var invalidIndex = Integer.MAX_VALUE;
      linkedlist.set(invalidIndex, element);
    });
  }

  @Test
  public void shouldRunningInteratorForEach() {
    for(var value : linkedlist) {}
  }
}
